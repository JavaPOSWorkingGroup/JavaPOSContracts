def GITHUB_REPO = 'https://github.com/JavaPOSWorkingGroup/javapos-contracts'
def travisProjectBuildBaseUrl = 'https://travis-ci.org/JavaPOSWorkingGroup/javapos-contracts'

def boolean isTravisCIServerBuild = System.getenv('TRAVIS')

buildScan.publishAlwaysIf(isTravisCIServerBuild)

if (isTravisCIServerBuild) {
	if (hasProperty('releaseVersion'))
	    buildScan.tag 'Release Build'
	else {
		if (System.env('TRAVIS_PULL_REQUEST')) {
			 buildScan.tag 'Pull Request Build'
			 buildScan.value 'Git Pull Request Branch', System.getenv('TRAVIS_PULL_REQUEST_BRANCH')
		}
		else
	    	buildScan.tag 'Commit Build'
	}
		    	
	def travisBuildId = System.getenv('TRAVIS_BUILD_ID')
	
	buildScan.value 'Travis Build URL', "$travisProjectBuildBaseUrl/builds/$travisBuildId"
	buildScan.value 'Travis Build Number', System.getenv('TRAVIS_BUILD_NUMBER')
	buildScan.value 'Build Trigger Event', System.getenv('TRAVIS_EVENT_TYPE')
	buildScan.value 'Git Branch Name', System.getenv('TRAVIS_BRANCH')
	buildScan.value 'Git Commit Id', System.getenv('TRAVIS_COMMIT')
}
else { // may be enabled by adding -Dscan command line argument
    buildScan.tag 'LOCAL'

	try {
		// Git commit id
		def commitId = 'git rev-parse --verify HEAD'.execute().text.trim()
		if (commitId) {
		    buildScan.value 'Git Commit ID', commitId
		    buildScan.link 'Source', "$GITHUB_REPO/tree/$commitId"
		}
		
		// Git branch name
		def branchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
		if (branchName) {
		    buildScan.value 'Git Branch Name', branchName
		}
		
		// Git dirty local state
		def status = 'git status --porcelain'.execute().text
		if (status) {
		    buildScan.tag "Local Build"
		    buildScan.value "Git Status", status
		}
	}
	catch (IOException ioe) {
		logger.lifecycle("Info: git project data can not be fetched for buildScan -- skipped; maybe, no local git client is installed") 
	}
}

